[all:vars]
# <basic section starts>
project_template_path="/etc/coredns-edge-deployment"
go_path="/root/go"
# 当时用caas(openshift)的时候oc_binary="/usr/bin/oc"
# 当使用k8s的时候oc_binary="/usr/bin/kubectl"
# oc_binary="/usr/bin/oc"
oc_binary="/usr/bin/kubectl"
namespace_coredns_edge="coredns-edge"
caas_cluster_domain="cluster.local"
#coredns_speaker_mode="initiative"
coredns_speaker_mode="passive"
offline="no"
deploy_node_is_master="no"
# </basic section ends>

# <tls sign section starts>
tls_c="CHINA"
tls_l="Shanghai"
tls_o="Your Orgnization"
tls_st="Shanghai"
tls_ou="CAAS"
# </tls sign section ends>

# <etcd operator section starts>
etcd_operator_repo="https://github.com/coreos/etcd-operator.git"
etcd_peer_svc_name="etcd-coredns-speaker"
# so for we only accept 'yes' or other than 'yes'
etcd_use_tls="yes"
etcd_ca_file_path="{{ project_template_path + '/etcd/etcd-client-ca.crt' }}"
etcd_key_file_path="{{ project_template_path + '/etcd/etcd-client.key' }}"
etcd_cert_file_path="{{ project_template_path + '/etcd/etcd-client.crt' }}"
etcd_storage_class_name="alicloud-nas"
etcd_storage_size=30
etcd_cluster_size=3
etcd_username=username
etcd_password=password
# </etcd operator section ends>

# <nats section starts>
nats_use_tls="yes"
nats_cluster_name="nats-cluster"
message_queue_subject="msg.edge.coredns"
message_queue_username="username"
message_queue_password="password"
message_queue_ca_file_path="{{ project_template_path + '/nats/ca.pem' }}"
message_queue_key_file_path="{{ project_template_path + '/nats/client-key.pem' }}"
message_queue_cert_file_path="{{ project_template_path + '/nats/client.pem' }}"
message_local_tls_certs_dir_path="/etc/coredns-edge-local-sign/"
# </nats section ends>

# <coredns management api section starts>
database_connection_protocol="https"
api_auth_mode="token" # so far we only support token
allowed_token="token1 | token2 | token3"
# </coredns management api section ends>

# <coredns message plugin section starts>
coredns_cluster_name=coredns
coredns_service_port=53
coredns_upstream_address=114.114.114.114
coredns_speaker_service_address="{{ 'coredns-speaker-svc.' + namespace_coredns_edge + '.svc' }}"
# 注意token必须是上面"allowed_token"中的一个
initial_data_provider_service_url="{{ coredns_speaker_service_address + '/99cloud/coredns-speaker/1.0.0/hijack-list?token=token1' }}"
# 建议不小10秒，有http request句柄关闭问题，当goroutine的运行时间小于request time out，会造成request body没有正确关闭，造成http request异常"too many open file"
ask_frequency=10
enable_report="false"
report_frequency=10
default_report_url="{{ coredns_speaker_service_address + '/99cloud/coredns-speaker/1.0.0/report?token=token1' }}"
# k8s=/etc/kubernetes/manifests caas(openshift)=/etc/origin/node/pods
# pod_manifest_path="/root/openshift.local.clusterup/static-pod-manifests"
pod_manifest_path="/etc/origin/node/pods"
# 不要修改除非你重新制作镜像
conatiner_config_dir_path="/etc/coredns/"
coredns_svc_protocal="UDP"
# ClusterIP | NodePort | LoadBalancer | ExternalName
# coredns_svc_type="ClusterIP"
coredns_svc_type="NodePort"
coredns_svc_external_name="coredns.example.com"
# </coredns message plugin section ends>

[master1]
localhost              ansible_connection=local
# 172.16.60.17  ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa_rhel

# define all host you want to deploy dns
# 注意这些节点必须是受k8s管理的节点
[dns]
localhost              ansible_connection=local
# 172.16.60.17  ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa_rhel
# 172.16.60.18  ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa_rhel
# 172.16.60.19  ansible_user=root ansible_ssh_private_key_file=~/.ssh/id_rsa_rhel

# 不要改，逻辑是在本地先签名证书，所以你运行ansible的时候可以是在一个部署节点上
# 也可以是在任何一台部署的目标机器上
# 因为部署dns的时候是static pod，而且部署dns的机器不一定是master节点
[tls]
localhost              ansible_connection=local